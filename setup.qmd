# Setup {.unnumbered}

This book contains reproducible code that can be run in both **R** and **Python** environments. The `sits` package is primarily developed in R, with Python support provided through a wrapper that uses the R environment.

## Configuring R environment {.unnumbered}

::: {.callout-note}
## Foundation required
The **R** environment is the foundation for `sits` and must be installed regardless of whether you plan to use R or Python interfaces.
:::

To use this book, it is required to have a proper R environment configured with the right tools, including:

1. R Programming Language 
2. RStudio IDE
3. System Dependencies
4. The `sits` R package
5. The `sitsdata` data package (for examples)

The sections below, outline how you can install these tools in your Operational System.

### Install R {.unnumbered}

Download and install the latest version of **R** for your operating system:

::: {.panel-tabset}

#### Windows {.panel-tab}

Download the installer from [CRAN Windows](https://cran.r-project.org/bin/windows/)

#### macOS {.panel-tab}

Download from [CRAN macOS](https://cran.r-project.org/bin/macosx/)

#### Linux {.panel-tab}

Use your distribution's package manager or download from [CRAN Linux](https://cran.r-project.org/bin/linux/)

:::


### Install RStudio {.unnumbered}

RStudio provides an integrated development environment (IDE) for R, available for Linux, macOS and Windows, offering a code editor, plot preview, debugging tools, package management, and more. You can download [RStudio](https://docs.posit.co/ide/user/ide/get-started/) from the [Posit website](https://posit.co/download/rstudio-desktop/).

Installing RStudio is optional, as you can use R in any other IDE or code editor. However, it is **recommended** as it offers a very easy-to-use environment and amazing integration with the R Package ecossystem.

### Installing SITS in R {.unnumbered}

The `sits` package is available through the Comprehensive R Archive Network (CRAN), which is the official distribution channel for R packages.

::: {.panel-tabset}

#### macOS and Windows {.panel-tab}

macOS and Windows users should install binary packages from CRAN. The installation process requires specific dependencies to be installed in the correct order.

```{r}
#| eval: false
install.packages("sits", dependencies = TRUE)
```

::: {.callout-note}
#### Package compilation
Some dependencies from the `sits` package may cause errors during installation, as they require compilation. If you encounter this issue, there are additional tools that can help. For source compilation on Windows, install [Rtools](https://cran.r-project.org/bin/windows/Rtools/). For macOS, follow the instructions at [mac.r-project.org/tools/](https://mac.r-project.org/tools/).
:::

#### Ubuntu {.panel-tab}

Linux installations require system-level dependencies to be installed first.

**Step 1: Install system dependencies**
```{bash}
#| eval: false
sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
sudo apt-get update
sudo apt-get install libudunits2-dev \
                        libgdal-dev \
                        libgeos-dev \
                        libproj-dev \
                        gdal-bin \
                        proj-bin
```

If you encounter PPA repository errors, install the required package first:
```{bash}
#| eval: false
sudo apt-get install software-properties-common
```

**Step 2: Install sits**
```{r}
#| eval: false
install.packages("sits", dependencies = TRUE)
```

#### Fedora {.panel-tab}

**Step 1: Install system dependencies**
```{bash}
#| eval: false
sudo dnf install gdal \
                    gdal-devel \
                    proj-devel \
                    geos-devel \
                    sqlite-devel \
                    udunits2-devel
```

**Step 2: Install sits**
```{r}
#| eval: false
install.packages("sits", dependencies = TRUE)
```

#### Other Linux {.panel-tab}

For other Linux distributions, we recommend using [Docker](https://www.docker.com/) containers or following the distribution-specific [GDAL installation guides](https://gdal.org/en/stable/development/building_from_source.html).

:::


### Installing sitsdata in R {.unnumbered}

Some examples in this book, uses open data available in the [sitsdata](https://github.com/e-sensing/sitsdata) package. This package is freely available on GitHub, and can be installed in Linux, macOS and Windows, using the following commands:

**1. Increase the network timeout time**

```{r}
#| eval: false
options(timeout = 300) # Set network timeout to 5 minutes
```

**2. Install sitsdata**

```{r}
#| eval: false
devtools::install_github("e-sensing/sitsdata")
```

---

## Configuring Python environment {.unnumbered}

::: {.callout-note}
## Optional interface
The Python interface uses the R implementation, so [R must be installed](#configuring-r-environment) before setting up the Python environment.
:::

The Python interface for `sits` is as a wrapper around the R implementation, that gives Python users access to the all features of the `sits` package, integrated with the Python ecosystem. This section outlines the available options for installing the Python interface.

### Prerequisites {.unnumbered}

To use `sits` in Python, you must fill the following prerequisites:

1. [R environment](#configuring-r-environment), including dependencies.
2. [Arrow package in R](https://arrow.apache.org/docs/r/)
3. [Python 3.10 or higher](https://www.python.org/downloads/)

### Install Python {.unnumbered}

Download and install the latest version of **Python** for your operating system:

::: {.panel-tabset}

#### Windows {.panel-tab}

Download the installer from the [Python website](https://www.python.org/downloads/)

#### macOS {.panel-tab}

Download the installer from the [Python website](https://www.python.org/downloads/)

#### Linux {.panel-tab}

Use your distribution's package manager or download from the [Python website](https://www.python.org/downloads/)

:::

### Installing arrow in R {.unnumbered}

To transfer objects between R and Python, the [Apache Arrow](https://arrow.apache.org/docs/index.html) is used. Therefore, to take advantage of its features, it must be installed in your R environment. You can install it using the following command:

```r
install.packages('arrow')
```

### Installing SITS in Python {.unnumbered}

The `sits` package is available in the [PyPi](https://pypi.org/project/pysits/#description), and can be installing using the following tools:

::: {.panel-tabset}

#### pip {.panel-tab}

In your terminal, run:

```{bash}
#| eval: false
pip install pysits
```

#### pip (with venv) {.panel-tab}

In your terminal, run:

**1. Create virtual environment**
```{bash}
#| eval: false
python -m venv venv
```

**2. Activate environment**
```{bash}
#| eval: false
source venv/bin/activate # or .venv\Scripts\activate on Windows
```

**3. Install pysits**
```{bash}
#| eval: false
pip install pysits
```

::: {.callout-note}
#### Virtual environments
If you'd like to learn more about Python virtual environments, please refer to the official Python documentation on the topic.
:::

:::

### Development versions {.panel-tab}

Apart from the official versions of `sits` available on CRAN and PyPI, as described above, users who want to preview features planned for future releases have the option to install the development version.

::: {.callout-note}
## Advanced users
Using the development version is recommended for advanced users or those comfortable with troubleshooting within the `sits` ecosystem.
:::

You can install development versions in R and Python, using the following commands:

::: {.panel-tabset}

#### R {.panel-tab}

In your terminal, run:

```{r}
#| eval: false
devtools::install_github("e-sensing/sits@dev", dependencies = TRUE)
```

#### Python {.panel-tab}

In your terminal, run:

```{bash}
#| eval: false
pip install git+https://github.com/e-sensing/pysits.git@dev
```
:::

#### GPU Support for Deep Learning {.unnumbered}

For users working with deep learning models, `sits` supports GPU acceleration through the [torch](https://torch.mlverse.org/docs/) package, which is already included as a dependency when you install `sits`. This provides significant performance improvements for deep learning operations.

**Automatic GPU detection:**

The `torch` package automatically detects available GPUs and utilizes them when possible, requiring no additional configuration in most cases.

**System requirements:**

- NVIDIA CUDA toolkit
- Compatible NVIDIA GPU
- Appropriate GPU drivers

**GPU configuration:**

To use GPU in `sits` with `torch` you must have an environment with proper configuration of the NVIDIA toolkit, including:

1. **CUDA installation:** Ensure CUDA toolkit is properly installed and accessible
2. **Driver compatibility:** Verify NVIDIA drivers are compatible with your CUDA version

For more details on GPU setup instructions and troubleshooting, refer to the [torch documentation](https://torch.mlverse.org/docs/articles/installation.html#gpu).
